import { existsSync } from 'node:fs';
import { defu } from 'defu';
import { logger, defineNuxtModule, resolveAlias, installModule, createResolver, extendViteConfig, addPlugin, addComponentsDir, addServerHandler, addPrerenderRoutes } from '@nuxt/kit';

const log = logger.withScope("@nuxt/studio");
const module = defineNuxtModule({
  meta: {
    configKey: "studio"
  },
  defaults: {
    enabled: "production"
  },
  async setup(options, nuxt) {
    nuxt.hook("schema:resolved", (schema) => {
      nuxt.options.runtimeConfig.appConfigSchema = {
        properties: schema.properties?.appConfig,
        default: schema.default?.appConfig
      };
    });
    nuxt.hook("app:resolve", (appCtx) => {
      const studioAppConfigPath = resolveAlias("~/.studio/app.config.json");
      if (existsSync(studioAppConfigPath)) {
        appCtx.configs.unshift(studioAppConfigPath);
      }
    });
    await installModule("nuxt-config-schema");
    if (options.enabled === "production" && nuxt.options.dev === true) {
      return;
    }
    const contentModule = "@nuxt/content";
    if (!nuxt.options.runtimeConfig.content && !nuxt.options.modules.includes(contentModule)) {
      log.warn("Could not find `@nuxt/content` module. Please install it to enable preview mode.");
      return;
    }
    const contentModuleVersion = await import(contentModule).then((m) => m.default || m).then((m) => m.getMeta()).then((m) => m.version).catch(() => "0");
    if (contentModuleVersion < "2.1.1") {
      log.warn("Please update `@nuxt/content` to version 2.1.1 or higher to enable preview mode.");
      return;
    }
    const { resolve } = createResolver(import.meta.url);
    const apiURL = process.env.NUXT_PUBLIC_STUDIO_API_URL || process.env.STUDIO_API || "https://api.nuxt.studio";
    nuxt.options.runtimeConfig.studio = nuxt.options.runtimeConfig.studio || {};
    nuxt.options.runtimeConfig.public.studio = defu(nuxt.options.runtimeConfig.public.studio, { apiURL });
    extendViteConfig((config) => {
      config.optimizeDeps = config.optimizeDeps || {};
      config.optimizeDeps.include = config.optimizeDeps.include || [];
      config.optimizeDeps.include.push(
        "socket.io-client",
        "slugify"
      );
    });
    addPlugin(resolve("./runtime/plugins/preview-detector"));
    addPlugin(resolve("./runtime/plugins/iframe.client"));
    addPlugin(resolve("./runtime/plugins/app-config.server"));
    addComponentsDir({
      path: resolve("./runtime/components")
    });
    addServerHandler({
      method: "get",
      route: "/__studio.json",
      handler: resolve("./runtime/server/routes/studio")
    });
    addPrerenderRoutes("/__studio.json");
    await installModule("nuxt-component-meta");
  }
});

export { module as default };
