import { createApp, computed } from "vue";
import ContentPreviewMode from "../components/ContentPreviewMode.vue";
import { createSingleton, mergeDraft } from "../utils/index.mjs";
import { callWithNuxt } from "#app";
import { refreshNuxtData, updateAppConfig, useAppConfig, useCookie, useNuxtApp, useRuntimeConfig, useState } from "#imports";
const useDefaultAppConfig = createSingleton(() => JSON.parse(JSON.stringify(useAppConfig())));
export const useStudio = () => {
  const nuxtApp = useNuxtApp();
  const runtimeConfig = useRuntimeConfig().public.studio || {};
  const initialAppConfig = useDefaultAppConfig();
  const themeSheet = nuxtApp?.vueApp?._context?.config?.globalProperties?.$pinceauTheme;
  const initialTokensConfig = {};
  const storage = useState("client-db", () => null);
  const previewToken = useCookie("previewToken", { sameSite: "none", secure: true });
  const syncPreviewFiles = async (contentStorage, files, ignoreBuiltContents = true) => {
    const keys = await contentStorage.getKeys(`${previewToken.value}:`);
    await Promise.all(keys.map((key) => contentStorage.removeItem(key)));
    await contentStorage.setItem(
      `${previewToken.value}$`,
      JSON.stringify({
        ignoreBuiltContents
      })
    );
    await Promise.all(
      files.map((item) => contentStorage.setItem(`${previewToken.value}:${item.parsed?._id}`, JSON.stringify(item.parsed)))
    );
  };
  const syncPreviewAppConfig = (appConfig) => {
    callWithNuxt(nuxtApp, updateAppConfig, [appConfig || initialAppConfig]);
  };
  const syncPreviewTokensConfig = (tokensConfig) => {
    if (!themeSheet || !themeSheet?.updateTheme) {
      return;
    }
    callWithNuxt(nuxtApp, themeSheet.updateTheme, [tokensConfig || initialTokensConfig]);
  };
  const syncPreview = async (contentStorage) => {
    const data = await $fetch("api/projects/preview", {
      baseURL: runtimeConfig.apiURL,
      params: {
        token: previewToken.value
      }
    });
    const mergedFiles = mergeDraft(data.files, data.additions, data.deletions);
    const contentFiles = mergedFiles.filter((item) => item.path.startsWith("content"));
    await syncPreviewFiles(contentStorage, contentFiles, (data.files || []).length !== 0);
    const dotStudioFiles = mergedFiles.filter((item) => item.path.startsWith(".studio"));
    const appConfig = dotStudioFiles.find((item) => item.path === ".studio/app.config.json");
    syncPreviewAppConfig(appConfig?.parsed);
    const tokensConfig = dotStudioFiles.find((item) => item.path === ".studio/tokens.config.json");
    syncPreviewTokensConfig(tokensConfig?.parsed);
  };
  const requestPreviewSynchronization = async () => {
    await $fetch("api/projects/preview/sync", {
      baseURL: runtimeConfig.apiURL,
      method: "POST",
      params: {
        token: previewToken.value
      }
    });
  };
  const mountPreviewUI = (storage2) => {
    const storageReady = computed(() => !!storage2.value);
    const el = document.createElement("div");
    el.id = "__nuxt_preview_wrapper";
    document.body.appendChild(el);
    createApp(ContentPreviewMode, {
      previewToken,
      apiURL: runtimeConfig.apiURL,
      storageReady,
      refresh: () => syncPreview(storage2.value).then(() => refreshNuxtData()),
      init: requestPreviewSynchronization
    }).mount(el);
  };
  const findContentWithId = async (path) => {
    if (!path) {
      return null;
    }
    path = path.replace(/\/$/, "");
    let content = await storage.value?.getItem(`${previewToken.value}:${path}`);
    if (!content) {
      content = await storage.value?.getItem(path);
    }
    return content;
  };
  return {
    apiURL: runtimeConfig.apiURL,
    previewToken,
    contentStorage: storage,
    syncPreview,
    syncPreviewFiles,
    syncPreviewAppConfig,
    syncPreviewTokensConfig,
    requestPreviewSynchronization,
    mountPreviewUI,
    findContentWithId
  };
};
