'use strict';

const defu = require('defu');
const scule = require('scule');
const ohash = require('ohash');
const variants = require('./shared/pinceau.407edab2.cjs');
require('vue');
const stringify = require('./shared/pinceau.7e38ce94.cjs');
require('chroma-js');
require('pathe');
require('postcss-nested');
require('postcss-custom-properties');
require('postcss-dark-theme-class');
require('fs');
require('@volar/vue-language-core');
require('acorn');
require('chalk');
require('consola');
require('perf_hooks');
require('vue/compiler-sfc');
require('recast');
require('recast/parsers/typescript.js');
require('./shared/pinceau.7cd078d1.cjs');

const fullCapabilities = {
  completion: true,
  definition: true,
  diagnostic: true,
  hover: true,
  references: true,
  rename: true,
  semanticTokens: true
};

const plugin = (_) => ({
  version: 1,
  resolveEmbeddedFile(fileName, sfc, embeddedFile) {
    const addDt = (match, dtKey, index, vueTag) => {
      if (!embeddedFile.content) {
        return;
      }
      embeddedFile.content.push(`
const __VLS_$dt_${ohash.hash(`${scule.camelCase(dtKey)}-${index}`)} = `);
      embeddedFile.content.push([
        match,
        vueTag,
        index,
        fullCapabilities
      ]);
      embeddedFile.content.push("\n");
    };
    if (embeddedFile.fileName.replace(fileName, "").match(/^\.(js|ts|jsx|tsx)$/)) {
      let variants$1 = {};
      for (let i = 0; i < sfc.styles.length; i++) {
        const style = sfc.styles[i];
        const _variants = resolveStyleContent(embeddedFile, style, i, addDt);
        variants$1 = defu.defu(variants$1, _variants.variants);
      }
      const imports = [
        "\nimport type { CSSFunctionType, PinceauMediaQueries } from 'pinceau'\n",
        "\nimport type { ExtractPropTypes } from 'vue'\n",
        "\ntype __VLS_InstanceOmittedKeys = 'onVnodeBeforeMount' | 'onVnodeBeforeUnmount' | 'onVnodeBeforeUpdate' | 'onVnodeMounted' | 'onVnodeUnmounted' | 'onVnodeUpdated' | 'key' | 'ref' | 'ref_for' | 'ref_key' | 'style' | 'class'\n",
        `
type __VLS_PropsType = (Omit<InstanceType<typeof import('${fileName}').default>['$props'], __VLS_InstanceOmittedKeys>)
`,
        "\nfunction css (declaration: CSSFunctionType<__VLS_PropsType>) { return { declaration } }\n"
      ];
      if (sfc.scriptSetup) {
        const isTs = sfc.scriptSetup.lang === "ts";
        const variantProps = variants.resolveVariantsProps(variants$1, isTs);
        let variantsPropsAst = variants.expressionToAst(JSON.stringify(variantProps));
        variantsPropsAst = variants.castVariantsPropsAst(variantsPropsAst);
        imports.push(`
const variants = ${variants.printAst(variantsPropsAst).code}
`);
      }
      embeddedFile.content.push(...imports);
    }
  }
});
function resolveStyleContent(embeddedFile, style, i, addDt) {
  let variants$1 = {};
  try {
    if (style.lang === "ts") {
      const declaration = variants.resolveCssCallees(
        style.content,
        (styleAst) => {
          const cssContent = variants.evalCssDeclaration(styleAst);
          if (cssContent.variants) {
            return cssContent.variants;
          }
          return {};
        }
      );
      variants$1 = defu.defu(variants$1, declaration);
    }
  } catch (e) {
  }
  if (style?.content) {
    const cssMatches = style.content.match(/css\(([\s\S]*)\)/);
    if (cssMatches) {
      embeddedFile.content.push("\nconst __VLS_css = ");
      embeddedFile.content.push([
        cssMatches[0],
        style.name,
        cssMatches.index,
        fullCapabilities
      ]);
    }
    style.content.replace(
      stringify.dtRegex,
      (match, dtKey, index) => {
        addDt(match, dtKey, index, style.name, i);
        return match;
      }
    );
  }
  return { variants: variants$1 };
}

module.exports = plugin;
