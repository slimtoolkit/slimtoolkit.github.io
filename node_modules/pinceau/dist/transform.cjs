'use strict';

const MagicString = require('magic-string');
require('defu');
require('acorn');
require('vue');
require('chroma-js');
require('pathe');
require('postcss-nested');
require('postcss-custom-properties');
require('postcss-dark-theme-class');
require('scule');
const variants = require('./shared/pinceau.407edab2.cjs');
require('ohash');
const sfc = require('./shared/pinceau.7e4f8cb2.cjs');
require('fs');
require('./shared/pinceau.7e38ce94.cjs');
require('./shared/pinceau.7cd078d1.cjs');
require('chalk');
require('consola');
require('perf_hooks');
require('vue/compiler-sfc');
require('recast');
require('recast/parsers/typescript.js');

function exposedTransform(code, id) {
  const variants$1 = {};
  const computedStyles = {};
  const magicString = new MagicString(code);
  const ctx = { $tokens: () => "", options: { colorSchemeMode: "media" } };
  const parsedComponent = variants.parseVueComponent(code, { filename: id });
  if (parsedComponent.descriptor.styles) {
    sfc.resolveStyle(id, parsedComponent, magicString, variants$1, computedStyles, ctx);
  }
  const hasRuntimeStyles = Object.keys(variants$1).length > 0 || Object.keys(computedStyles).length > 0;
  if (parsedComponent.descriptor.template) {
    sfc.resolveTemplate(id, parsedComponent, magicString, hasRuntimeStyles);
  }
  if (parsedComponent.descriptor.scriptSetup) {
    sfc.resolveScriptSetup(id, parsedComponent, magicString, variants$1, computedStyles, parsedComponent.descriptor.scriptSetup.lang === "ts");
  }
  return magicString.toString();
}

exports.transformSfc = exposedTransform;
