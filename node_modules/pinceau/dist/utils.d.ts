export { d as castValue, b as castValues, c as createTokensHelper, g as getResolvedSelectors, p as pathToVarName, a as resolveCssProperty, f as resolveCustomDirectives, e as resolveReferences, r as resolveVariableFromPath, s as stringify, t as transformTokensToVariable } from './_tokens-2f1130ce.js';
export { g as get, n as normalizeConfig, p as palette, s as set, w as walkTokens } from './data-e0633942.js';
import { UserConfig } from 'vite';
import { P as PinceauOptions, V as VueQuery } from './index-700b1958.js';
import 'vue';
import '#pinceau/theme';
import '#pinceau/utils';
import 'untyped';
import 'csstype';

declare function registerAliases(config: UserConfig, options: PinceauOptions): void;
declare function registerPostCssPlugins(config: UserConfig, options: PinceauOptions): void;

declare const referencesRegex: RegExp;
declare const keyRegex: RegExp;
declare const cssContentRegex: RegExp;
declare const mqPlainRegex: RegExp;
declare const mqCssRegex: RegExp;
declare const darkRegex: RegExp;
declare const lightRegex: RegExp;
declare const DARK = "@dark";
declare const LIGHT = "@light";
declare const INITIAL = "@initial";
declare const dtRegex: RegExp;
declare const variantsRegex: RegExp;
declare const responsiveMediaQueryRegex: RegExp;
declare const outputFileNames: string[];

/**
 * Vue SFC Query, forked from the below:
 * - original repository url: https://github.com/vitejs/vite/tree/main/packages/plugin-vue
 * - code url: https://github.com/vitejs/vite/blob/main/packages/plugin-vue/src/utils/query.ts
 * - author: Evan You (https://github.com/yyx990803)
 * - license: MIT
 *
 * - Copied from: https://github.com/intlify/bundle-tools/blob/37ae3acde9e65bf55f5e820b1653b5fddb7ff0cc/packages/unplugin-vue-i18n/src/query.ts#L1
 */
declare function parseVueQuery(id: string): VueQuery;

/**
 * Make a list of `get()` compatible paths for any object.
 */
declare const objectPaths: (data: any) => any;
/**
 * Flatten tokens object for runtime usage.
 */
declare const flattenTokens: (data: any, toValue?: boolean) => Record<string, any>;

export { DARK, INITIAL, LIGHT, cssContentRegex, darkRegex, dtRegex, flattenTokens, keyRegex, lightRegex, mqCssRegex, mqPlainRegex, objectPaths, outputFileNames, parseVueQuery, referencesRegex, registerAliases, registerPostCssPlugins, responsiveMediaQueryRegex, variantsRegex };
