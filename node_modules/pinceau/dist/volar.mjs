import { defu } from 'defu';
import { camelCase } from 'scule';
import { hash } from 'ohash';
import { r as resolveVariantsProps, e as expressionToAst, f as castVariantsPropsAst, p as printAst, g as resolveCssCallees, h as evalCssDeclaration } from './shared/pinceau.6bd967c3.mjs';
import 'vue';
import { d as dtRegex } from './shared/pinceau.5247c7c8.mjs';
import 'chroma-js';
import 'pathe';
import 'postcss-nested';
import 'postcss-custom-properties';
import 'postcss-dark-theme-class';
import 'fs';
import '@volar/vue-language-core';
import 'acorn';
import 'chalk';
import 'consola';
import 'perf_hooks';
import 'vue/compiler-sfc';
import 'recast';
import 'recast/parsers/typescript.js';
import './shared/pinceau.97e4e32f.mjs';

const fullCapabilities = {
  completion: true,
  definition: true,
  diagnostic: true,
  hover: true,
  references: true,
  rename: true,
  semanticTokens: true
};

const plugin = (_) => ({
  version: 1,
  resolveEmbeddedFile(fileName, sfc, embeddedFile) {
    const addDt = (match, dtKey, index, vueTag) => {
      if (!embeddedFile.content) {
        return;
      }
      embeddedFile.content.push(`
const __VLS_$dt_${hash(`${camelCase(dtKey)}-${index}`)} = `);
      embeddedFile.content.push([
        match,
        vueTag,
        index,
        fullCapabilities
      ]);
      embeddedFile.content.push("\n");
    };
    if (embeddedFile.fileName.replace(fileName, "").match(/^\.(js|ts|jsx|tsx)$/)) {
      let variants = {};
      for (let i = 0; i < sfc.styles.length; i++) {
        const style = sfc.styles[i];
        const _variants = resolveStyleContent(embeddedFile, style, i, addDt);
        variants = defu(variants, _variants.variants);
      }
      const imports = [
        "\nimport type { CSSFunctionType, PinceauMediaQueries } from 'pinceau'\n",
        "\nimport type { ExtractPropTypes } from 'vue'\n",
        "\ntype __VLS_InstanceOmittedKeys = 'onVnodeBeforeMount' | 'onVnodeBeforeUnmount' | 'onVnodeBeforeUpdate' | 'onVnodeMounted' | 'onVnodeUnmounted' | 'onVnodeUpdated' | 'key' | 'ref' | 'ref_for' | 'ref_key' | 'style' | 'class'\n",
        `
type __VLS_PropsType = (Omit<InstanceType<typeof import('${fileName}').default>['$props'], __VLS_InstanceOmittedKeys>)
`,
        "\nfunction css (declaration: CSSFunctionType<__VLS_PropsType>) { return { declaration } }\n"
      ];
      if (sfc.scriptSetup) {
        const isTs = sfc.scriptSetup.lang === "ts";
        const variantProps = resolveVariantsProps(variants, isTs);
        let variantsPropsAst = expressionToAst(JSON.stringify(variantProps));
        variantsPropsAst = castVariantsPropsAst(variantsPropsAst);
        imports.push(`
const variants = ${printAst(variantsPropsAst).code}
`);
      }
      embeddedFile.content.push(...imports);
    }
  }
});
function resolveStyleContent(embeddedFile, style, i, addDt) {
  let variants = {};
  try {
    if (style.lang === "ts") {
      const declaration = resolveCssCallees(
        style.content,
        (styleAst) => {
          const cssContent = evalCssDeclaration(styleAst);
          if (cssContent.variants) {
            return cssContent.variants;
          }
          return {};
        }
      );
      variants = defu(variants, declaration);
    }
  } catch (e) {
  }
  if (style?.content) {
    const cssMatches = style.content.match(/css\(([\s\S]*)\)/);
    if (cssMatches) {
      embeddedFile.content.push("\nconst __VLS_css = ");
      embeddedFile.content.push([
        cssMatches[0],
        style.name,
        cssMatches.index,
        fullCapabilities
      ]);
    }
    style.content.replace(
      dtRegex,
      (match, dtKey, index) => {
        addDt(match, dtKey, index, style.name, i);
        return match;
      }
    );
  }
  return { variants };
}

export { plugin as default };
