import MagicString from 'magic-string';
import 'defu';
import 'acorn';
import 'vue';
import 'chroma-js';
import 'pathe';
import 'postcss-nested';
import 'postcss-custom-properties';
import 'postcss-dark-theme-class';
import 'scule';
import { b as parseVueComponent } from './shared/pinceau.6bd967c3.mjs';
import 'ohash';
import { b as resolveStyle, c as resolveTemplate, d as resolveScriptSetup } from './shared/pinceau.0ea5e49b.mjs';
import 'fs';
import './shared/pinceau.5247c7c8.mjs';
import './shared/pinceau.97e4e32f.mjs';
import 'chalk';
import 'consola';
import 'perf_hooks';
import 'vue/compiler-sfc';
import 'recast';
import 'recast/parsers/typescript.js';

function exposedTransform(code, id) {
  const variants = {};
  const computedStyles = {};
  const magicString = new MagicString(code);
  const ctx = { $tokens: () => "", options: { colorSchemeMode: "media" } };
  const parsedComponent = parseVueComponent(code, { filename: id });
  if (parsedComponent.descriptor.styles) {
    resolveStyle(id, parsedComponent, magicString, variants, computedStyles, ctx);
  }
  const hasRuntimeStyles = Object.keys(variants).length > 0 || Object.keys(computedStyles).length > 0;
  if (parsedComponent.descriptor.template) {
    resolveTemplate(id, parsedComponent, magicString, hasRuntimeStyles);
  }
  if (parsedComponent.descriptor.scriptSetup) {
    resolveScriptSetup(id, parsedComponent, magicString, variants, computedStyles, parsedComponent.descriptor.scriptSetup.lang === "ts");
  }
  return magicString.toString();
}

export { exposedTransform as transformSfc };
